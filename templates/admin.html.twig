{% import "widgets.html.twig" as widget %}
{% extends "base.html.twig" %}
{% block title %}{% trans "Administration" %}{% endblock %}
{% block container %}
    <h1>{% trans "Administration" %}</h1>
    <div>
      <div id="parent" style="padding: 5px; margin-bottom: 5px; height: 300px; border: 4px solid white;">
        <canvas id="myChart" style="border:1px solid #000;"></canvas>
      </div>
    </div>
    <div>
    {{ widget.table(global_statistics) }}
    </div>
    <div>
    {{ widget.table(config) }}
    </div>
    <a href="{{ config.base_path }}/">{% trans "Return to Home Page" %}</a>
{% endblock %}

{% block scripts %}
<script src="{{ config.base_path }}/js/Chart.min.js"></script>

<script>

// Chart.js documentation example, nothing weird here
// Create canvas
var parent = document.getElementById('parent');
var canvas = document.getElementById('myChart'),
    ctx = canvas.getContext('2d'),
    startingData = {
        labels: [{% for key, value in global_statistics.Participation %}{% if loop.index0 > 0 %},{% endif %}"{{ key }}"{%endfor%}],
        datasets: [{
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            data: [{% for key, value in global_statistics.Participation %}{% if loop.index0 > 0 %},{% endif %}{{ value }}{%endfor%}]
        }]
    };

var wdt=parent.clientWidth-parseInt(parent.style.paddingLeft)-parseInt(parent.style.paddingRight);
var ht=parent.clientHeight-parseInt(parent.style.paddingTop)-parseInt(parent.style.paddingBottom);

canvas.setAttribute('height',ht+"px");
canvas.setAttribute('width',wdt+"px");
// Reduce the animation steps for demo clarity.
var optionChart = new Chart(ctx).Bar(startingData, {
    animationSteps: 15
});


setInterval(function () {
    // Get a random index point
    // var indexToUpdate = Math.round(Math.random() * startingData.labels.length);
    
    /*
    getData("{{ config.api_path }}/participation?mode=count", function(data) {
      optionChart.datasets[0].bars[indexToUpdate].value = data[0].count;
    })    

    optionChart.update();
    */
}, 5000);

</script>
{% endblock %}